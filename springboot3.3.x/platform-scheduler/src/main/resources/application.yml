server:
  port: 8081

spring:
  application:
    name: platform-scheduler
  config:
    import:
      - optional:classpath:application.yml   # 导入common模块的配置
  # 数据源配置
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://192.168.80.137:3306/test?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
    type: com.zaxxer.hikari.HikariDataSource
    # Hikari 连接池配置
    hikari:
      minimum-idle: 5
      maximum-pool-size: 15
      idle-timeout: 30000
      pool-name: SchedulerHikariCP
      max-lifetime: 1800000
      connection-timeout: 30000
      connection-test-query: SELECT 1
  # Quartz配置
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
    properties:
      org.quartz.jobStore.useProperties: false
      org.quartz.scheduler.instanceName: ClusterScheduler
      org.quartz.scheduler.instanceId: AUTO
      org.quartz.jobStore.class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
      #      org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX
      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
      org.quartz.jobStore.tablePrefix: QRTZ_
      org.quartz.jobStore.isClustered: true
      org.quartz.jobStore.clusterCheckinInterval: 10000
      org.quartz.jobStore.dataSource: quartzDataSource
  #  quartz:
  #    job-store-type: jdbc
  #    jdbc:
  #      initialize-schema: never  # never: 不初始化表结构，always: 总是初始化表结构
  #    properties:
  #      org.quartz.scheduler.instanceName: ClusterScheduler
  #      org.quartz.scheduler.instanceId: AUTO
  # Redis配置
  data:
    redis:
      # 通用配置
      password: 123456
      timeout: 5000
      # 集群配置（如果使用集群模式，则注释掉host和port）
      cluster:
        nodes:
          - 192.168.80.137:6379
          - 192.168.80.137:6380
          - 192.168.80.137:6381
          - 192.168.80.137:6382
          - 192.168.80.137:6383
          - 192.168.80.137:6384
      # 连接池配置
      lettuce:
        pool:
          max-active: 8  # 连接池最大连接数
          max-idle: 8    # 连接池最大空闲连接数
          min-idle: 0    # 连接池最小空闲连接数
          max-wait: 1000 # 连接池最大阻塞等待时间（使用负值表示没有限制）


      # 单机配置（如果使用集群模式，则注释掉这部分）
    #      host: 192.168.80.137
    #      port: 6379
    mongodb:
      uri: mongodb://root:123456@192.168.80.137:27017
      database: crawler
      auto-index-creation: true
# MyBatis配置
mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl

# 日志配置
logging:
  level:
    com.study: debug
    org.springframework.jdbc.core: debug
    org.apache.http: DEBUG
    javax.net: DEBUG

# 定时任务配置
scheduler:
  log:
    retain-days: 30  # 日志保留天数
collect:
  service:
    url: http://localhost:8082  # 默认的collect服务地址
    urls: # collect服务集群地址列表
      - http://localhost:8082
      - http://localhost:8083
      - http://localhost:8084
  scheduler:
    tasks:
      collect-distribution: # 任务分发作业
        cron: "0/30 * * * * ?"  # 每30秒执行一次
      health-sync: # 健康检查和同步作业
        cron: "0 0/5 * * * ?"   # 每5分钟执行一次
      failed-retry: # 失败重试作业
        cron: "0 0/10 * * * ?"  # 每10分钟执行一次
    #    jobs:
    #      tree-collection:
    #        cron: "0 0 1 * * ?"  # 每天凌晨1点执行
    #        parameters:
    #          projectId: "default-project"
    jobs:
      tree-collection:
        cron: "0 0 1 * * ?"
        data:
          url: "http://example.com/api/tree-data"
          method: "GET"

